// <auto-generated />
using System;
using ApartmentFinder.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApartmentFinder.Migrations
{
    [DbContext(typeof(ApartmentFinderContext))]
    partial class ApartmentFinderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApartmentFinder.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("AddressID");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressID = 1,
                            Street1 = "123 Main St",
                            ZipCode = "32501"
                        },
                        new
                        {
                            AddressID = 2,
                            Street1 = "456 Elm St",
                            ZipCode = "32501"
                        },
                        new
                        {
                            AddressID = 3,
                            Street1 = "222 Maple Ave",
                            ZipCode = "32505"
                        },
                        new
                        {
                            AddressID = 4,
                            Street1 = "333 Cedar St",
                            ZipCode = "32505"
                        },
                        new
                        {
                            AddressID = 5,
                            Street1 = "777 Walnut St",
                            ZipCode = "32509"
                        },
                        new
                        {
                            AddressID = 6,
                            Street1 = "888 Chestnut St",
                            ZipCode = "32509"
                        },
                        new
                        {
                            AddressID = 7,
                            Street1 = "999 Willow St",
                            Street2 = "Suite 100",
                            ZipCode = "32514"
                        },
                        new
                        {
                            AddressID = 8,
                            Street1 = "222 Elmwood Dr",
                            ZipCode = "32514"
                        },
                        new
                        {
                            AddressID = 9,
                            Street1 = "333 Oakwood Dr",
                            ZipCode = "32514"
                        },
                        new
                        {
                            AddressID = 10,
                            Street1 = "444 Pinecrest Ln",
                            ZipCode = "32526"
                        },
                        new
                        {
                            AddressID = 11,
                            Street1 = "555 Cedarwood Ln",
                            ZipCode = "32526"
                        },
                        new
                        {
                            AddressID = 12,
                            Street1 = "123 Beach Blvd",
                            ZipCode = "32561"
                        },
                        new
                        {
                            AddressID = 13,
                            Street1 = "456 Seaside Dr",
                            ZipCode = "32561"
                        },
                        new
                        {
                            AddressID = 14,
                            Street1 = "222 Shoreline Dr",
                            ZipCode = "32566"
                        },
                        new
                        {
                            AddressID = 15,
                            Street1 = "333 Coastal Way",
                            ZipCode = "32566"
                        },
                        new
                        {
                            AddressID = 16,
                            Street1 = "444 Harbor View Dr",
                            ZipCode = "32571"
                        },
                        new
                        {
                            AddressID = 17,
                            Street1 = "555 Bayfront Ave",
                            ZipCode = "32571"
                        },
                        new
                        {
                            AddressID = 18,
                            Street1 = "999 Sailboat Cir",
                            Street2 = "2nd Floor",
                            ZipCode = "32591"
                        },
                        new
                        {
                            AddressID = 19,
                            Street1 = "111 Anchor Dr",
                            Street2 = "Building B",
                            ZipCode = "32591"
                        });
                });

            modelBuilder.Entity("ApartmentFinder.Models.Amenity", b =>
                {
                    b.Property<int>("AmenityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AmenityID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("AmenityID");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            AmenityID = 1,
                            Description = "Outdoor pool available for residents.",
                            Name = "Swimming Pool"
                        },
                        new
                        {
                            AmenityID = 2,
                            Description = "Fully-equipped fitness center with cardio and strength training equipment.",
                            Name = "Fitness Center"
                        },
                        new
                        {
                            AmenityID = 3,
                            Description = "On-site dog park for residents with pets.",
                            Name = "Dog Park"
                        },
                        new
                        {
                            AmenityID = 4,
                            Description = "Well-maintained tennis court available for resident use.",
                            Name = "Tennis Court"
                        },
                        new
                        {
                            AmenityID = 5,
                            Description = "Spacious clubhouse with social areas and events for residents.",
                            Name = "Clubhouse"
                        },
                        new
                        {
                            AmenityID = 6,
                            Description = "On-site business center with computers, printers, and meeting rooms.",
                            Name = "Business Center"
                        },
                        new
                        {
                            AmenityID = 7,
                            Description = "Outdoor playground area for children.",
                            Name = "Playground"
                        },
                        new
                        {
                            AmenityID = 8,
                            Description = "On-site pet grooming station with bathing facilities.",
                            Name = "Pet Spa"
                        },
                        new
                        {
                            AmenityID = 9,
                            Description = "Dedicated yoga studio for residents to practice yoga and meditation.",
                            Name = "Yoga Studio"
                        },
                        new
                        {
                            AmenityID = 10,
                            Description = "Outdoor grilling and picnic area for resident use.",
                            Name = "Grilling Area"
                        },
                        new
                        {
                            AmenityID = 11,
                            Description = "Game room with billiards, foosball, and other entertainment options.",
                            Name = "Game Room"
                        },
                        new
                        {
                            AmenityID = 12,
                            Description = "Secure bike storage area for residents.",
                            Name = "Bike Storage"
                        },
                        new
                        {
                            AmenityID = 13,
                            Description = "On-site movie theater with regular movie screenings.",
                            Name = "Movie Theater"
                        },
                        new
                        {
                            AmenityID = 14,
                            Description = "Relaxing sauna available for resident use.",
                            Name = "Sauna"
                        },
                        new
                        {
                            AmenityID = 15,
                            Description = "Convenient car wash station for residents.",
                            Name = "Car Wash Station"
                        },
                        new
                        {
                            AmenityID = 16,
                            Description = "Scenic roof deck with panoramic views of the city.",
                            Name = "Roof Deck"
                        },
                        new
                        {
                            AmenityID = 17,
                            Description = "Daily valet trash service for residents' convenience.",
                            Name = "Valet Trash Service"
                        },
                        new
                        {
                            AmenityID = 18,
                            Description = "Secure gated entry with controlled access for residents.",
                            Name = "Gated Entry"
                        },
                        new
                        {
                            AmenityID = 19,
                            Description = "Package lockers for secure delivery and retrieval of packages.",
                            Name = "Package Lockers"
                        },
                        new
                        {
                            AmenityID = 20,
                            Description = "24-hour emergency maintenance service for residents.",
                            Name = "24-Hour Maintenance"
                        });
                });

            modelBuilder.Entity("ApartmentFinder.Models.Lease", b =>
                {
                    b.Property<int>("ListingID")
                        .HasColumnType("int");

                    b.Property<int>("TenantID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ListingID", "TenantID");

                    b.ToTable("Leases");

                    b.HasData(
                        new
                        {
                            ListingID = 3,
                            TenantID = 20,
                            Status = 2
                        },
                        new
                        {
                            ListingID = 4,
                            TenantID = 19,
                            Status = 2
                        },
                        new
                        {
                            ListingID = 5,
                            TenantID = 18,
                            Status = 2
                        },
                        new
                        {
                            ListingID = 6,
                            TenantID = 17,
                            Status = 3
                        },
                        new
                        {
                            ListingID = 7,
                            TenantID = 16,
                            Status = 2
                        },
                        new
                        {
                            ListingID = 8,
                            TenantID = 15,
                            Status = 0
                        },
                        new
                        {
                            ListingID = 9,
                            TenantID = 14,
                            Status = 3
                        },
                        new
                        {
                            ListingID = 10,
                            TenantID = 13,
                            Status = 3
                        },
                        new
                        {
                            ListingID = 11,
                            TenantID = 12,
                            Status = 0
                        },
                        new
                        {
                            ListingID = 12,
                            TenantID = 11,
                            Status = 0
                        },
                        new
                        {
                            ListingID = 13,
                            TenantID = 10,
                            Status = 3
                        },
                        new
                        {
                            ListingID = 14,
                            TenantID = 9,
                            Status = 0
                        },
                        new
                        {
                            ListingID = 15,
                            TenantID = 8,
                            Status = 3
                        },
                        new
                        {
                            ListingID = 16,
                            TenantID = 7,
                            Status = 0
                        },
                        new
                        {
                            ListingID = 17,
                            TenantID = 6,
                            Status = 0
                        },
                        new
                        {
                            ListingID = 18,
                            TenantID = 5,
                            Status = 0
                        },
                        new
                        {
                            ListingID = 19,
                            TenantID = 4,
                            Status = 0
                        },
                        new
                        {
                            ListingID = 20,
                            TenantID = 3,
                            Status = 0
                        },
                        new
                        {
                            ListingID = 21,
                            TenantID = 2,
                            Status = 3
                        },
                        new
                        {
                            ListingID = 22,
                            TenantID = 1,
                            Status = 2
                        });
                });

            modelBuilder.Entity("ApartmentFinder.Models.Listing", b =>
                {
                    b.Property<int>("ListingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListingID"));

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAvailable")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MonthlyRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Months")
                        .HasColumnType("int");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.Property<float>("SquareFoot")
                        .HasColumnType("real");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("ListingID");

                    b.ToTable("Listings");

                    b.HasData(
                        new
                        {
                            ListingID = 1,
                            AddressID = 16,
                            Bathrooms = 1,
                            Bedrooms = 3,
                            DateAvailable = new DateTime(2024, 4, 3, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6832),
                            MonthlyRate = 1744m,
                            Months = 2,
                            OwnerID = 5,
                            SquareFoot = 2098f,
                            Unit = "Unit 1"
                        },
                        new
                        {
                            ListingID = 2,
                            AddressID = 9,
                            Bathrooms = 1,
                            Bedrooms = 4,
                            DateAvailable = new DateTime(2024, 4, 4, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6919),
                            MonthlyRate = 1182m,
                            Months = 10,
                            OwnerID = 16,
                            SquareFoot = 2218f,
                            Unit = "Unit 2"
                        },
                        new
                        {
                            ListingID = 3,
                            AddressID = 7,
                            Bathrooms = 2,
                            Bedrooms = 1,
                            DateAvailable = new DateTime(2024, 4, 11, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6924),
                            MonthlyRate = 1329m,
                            Months = 2,
                            OwnerID = 4,
                            SquareFoot = 2480f,
                            Unit = "Unit 3"
                        },
                        new
                        {
                            ListingID = 4,
                            AddressID = 6,
                            Bathrooms = 1,
                            Bedrooms = 1,
                            DateAvailable = new DateTime(2024, 4, 8, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6929),
                            MonthlyRate = 1858m,
                            Months = 8,
                            OwnerID = 14,
                            SquareFoot = 2205f,
                            Unit = "Unit 4"
                        },
                        new
                        {
                            ListingID = 5,
                            AddressID = 17,
                            Bathrooms = 3,
                            Bedrooms = 3,
                            DateAvailable = new DateTime(2024, 4, 10, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6935),
                            MonthlyRate = 2144m,
                            Months = 12,
                            OwnerID = 16,
                            SquareFoot = 1970f,
                            Unit = "Unit 5"
                        },
                        new
                        {
                            ListingID = 6,
                            AddressID = 12,
                            Bathrooms = 1,
                            Bedrooms = 5,
                            DateAvailable = new DateTime(2024, 3, 17, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6943),
                            MonthlyRate = 2840m,
                            Months = 8,
                            OwnerID = 7,
                            SquareFoot = 2801f,
                            Unit = "Unit 6"
                        },
                        new
                        {
                            ListingID = 7,
                            AddressID = 13,
                            Bathrooms = 3,
                            Bedrooms = 5,
                            DateAvailable = new DateTime(2024, 3, 23, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6949),
                            MonthlyRate = 657m,
                            Months = 5,
                            OwnerID = 2,
                            SquareFoot = 886f,
                            Unit = "Unit 7"
                        },
                        new
                        {
                            ListingID = 8,
                            AddressID = 11,
                            Bathrooms = 2,
                            Bedrooms = 2,
                            DateAvailable = new DateTime(2024, 4, 3, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6954),
                            MonthlyRate = 592m,
                            Months = 8,
                            OwnerID = 6,
                            SquareFoot = 813f,
                            Unit = "Unit 8"
                        },
                        new
                        {
                            ListingID = 9,
                            AddressID = 4,
                            Bathrooms = 2,
                            Bedrooms = 4,
                            DateAvailable = new DateTime(2024, 3, 23, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6959),
                            MonthlyRate = 2422m,
                            Months = 10,
                            OwnerID = 6,
                            SquareFoot = 1832f,
                            Unit = "Unit 9"
                        },
                        new
                        {
                            ListingID = 10,
                            AddressID = 1,
                            Bathrooms = 1,
                            Bedrooms = 3,
                            DateAvailable = new DateTime(2024, 3, 30, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6965),
                            MonthlyRate = 2714m,
                            Months = 7,
                            OwnerID = 10,
                            SquareFoot = 2413f,
                            Unit = "Unit 10"
                        },
                        new
                        {
                            ListingID = 11,
                            AddressID = 12,
                            Bathrooms = 2,
                            Bedrooms = 3,
                            DateAvailable = new DateTime(2024, 3, 28, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6970),
                            MonthlyRate = 1663m,
                            Months = 4,
                            OwnerID = 5,
                            SquareFoot = 1142f,
                            Unit = "Unit 11"
                        },
                        new
                        {
                            ListingID = 12,
                            AddressID = 4,
                            Bathrooms = 2,
                            Bedrooms = 2,
                            DateAvailable = new DateTime(2024, 4, 13, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6975),
                            MonthlyRate = 1012m,
                            Months = 3,
                            OwnerID = 13,
                            SquareFoot = 920f,
                            Unit = "Unit 12"
                        },
                        new
                        {
                            ListingID = 13,
                            AddressID = 16,
                            Bathrooms = 1,
                            Bedrooms = 1,
                            DateAvailable = new DateTime(2024, 4, 10, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6980),
                            MonthlyRate = 741m,
                            Months = 11,
                            OwnerID = 3,
                            SquareFoot = 2689f,
                            Unit = "Unit 13"
                        },
                        new
                        {
                            ListingID = 14,
                            AddressID = 6,
                            Bathrooms = 3,
                            Bedrooms = 3,
                            DateAvailable = new DateTime(2024, 4, 9, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6985),
                            MonthlyRate = 2591m,
                            Months = 3,
                            OwnerID = 7,
                            SquareFoot = 2571f,
                            Unit = "Unit 14"
                        },
                        new
                        {
                            ListingID = 15,
                            AddressID = 13,
                            Bathrooms = 2,
                            Bedrooms = 3,
                            DateAvailable = new DateTime(2024, 3, 17, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6989),
                            MonthlyRate = 2685m,
                            Months = 12,
                            OwnerID = 12,
                            SquareFoot = 1147f,
                            Unit = "Unit 15"
                        },
                        new
                        {
                            ListingID = 16,
                            AddressID = 3,
                            Bathrooms = 3,
                            Bedrooms = 3,
                            DateAvailable = new DateTime(2024, 4, 4, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6994),
                            MonthlyRate = 1983m,
                            Months = 7,
                            OwnerID = 19,
                            SquareFoot = 1410f,
                            Unit = "Unit 16"
                        },
                        new
                        {
                            ListingID = 17,
                            AddressID = 1,
                            Bathrooms = 2,
                            Bedrooms = 3,
                            DateAvailable = new DateTime(2024, 4, 11, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(6999),
                            MonthlyRate = 628m,
                            Months = 9,
                            OwnerID = 3,
                            SquareFoot = 2398f,
                            Unit = "Unit 17"
                        },
                        new
                        {
                            ListingID = 18,
                            AddressID = 16,
                            Bathrooms = 1,
                            Bedrooms = 3,
                            DateAvailable = new DateTime(2024, 4, 2, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7138),
                            MonthlyRate = 990m,
                            Months = 9,
                            OwnerID = 5,
                            SquareFoot = 1820f,
                            Unit = "Unit 18"
                        },
                        new
                        {
                            ListingID = 19,
                            AddressID = 14,
                            Bathrooms = 2,
                            Bedrooms = 1,
                            DateAvailable = new DateTime(2024, 3, 31, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7143),
                            MonthlyRate = 2106m,
                            Months = 12,
                            OwnerID = 16,
                            SquareFoot = 936f,
                            Unit = "Unit 19"
                        },
                        new
                        {
                            ListingID = 20,
                            AddressID = 7,
                            Bathrooms = 3,
                            Bedrooms = 3,
                            DateAvailable = new DateTime(2024, 4, 1, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7145),
                            MonthlyRate = 605m,
                            Months = 11,
                            OwnerID = 5,
                            SquareFoot = 907f,
                            Unit = "Unit 20"
                        },
                        new
                        {
                            ListingID = 21,
                            AddressID = 18,
                            Bathrooms = 2,
                            Bedrooms = 5,
                            DateAvailable = new DateTime(2024, 4, 2, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7148),
                            MonthlyRate = 967m,
                            Months = 6,
                            OwnerID = 10,
                            SquareFoot = 2500f,
                            Unit = "Unit 21"
                        },
                        new
                        {
                            ListingID = 22,
                            AddressID = 6,
                            Bathrooms = 3,
                            Bedrooms = 3,
                            DateAvailable = new DateTime(2024, 3, 19, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7150),
                            MonthlyRate = 2569m,
                            Months = 9,
                            OwnerID = 8,
                            SquareFoot = 2916f,
                            Unit = "Unit 22"
                        },
                        new
                        {
                            ListingID = 23,
                            AddressID = 16,
                            Bathrooms = 2,
                            Bedrooms = 2,
                            DateAvailable = new DateTime(2024, 4, 2, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7153),
                            MonthlyRate = 2066m,
                            Months = 12,
                            OwnerID = 10,
                            SquareFoot = 865f,
                            Unit = "Unit 23"
                        },
                        new
                        {
                            ListingID = 24,
                            AddressID = 6,
                            Bathrooms = 2,
                            Bedrooms = 2,
                            DateAvailable = new DateTime(2024, 4, 1, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7156),
                            MonthlyRate = 1079m,
                            Months = 5,
                            OwnerID = 5,
                            SquareFoot = 2366f,
                            Unit = "Unit 24"
                        },
                        new
                        {
                            ListingID = 25,
                            AddressID = 10,
                            Bathrooms = 2,
                            Bedrooms = 5,
                            DateAvailable = new DateTime(2024, 3, 29, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7160),
                            MonthlyRate = 1431m,
                            Months = 8,
                            OwnerID = 12,
                            SquareFoot = 1637f,
                            Unit = "Unit 25"
                        },
                        new
                        {
                            ListingID = 26,
                            AddressID = 10,
                            Bathrooms = 3,
                            Bedrooms = 4,
                            DateAvailable = new DateTime(2024, 4, 1, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7162),
                            MonthlyRate = 634m,
                            Months = 2,
                            OwnerID = 7,
                            SquareFoot = 1603f,
                            Unit = "Unit 26"
                        },
                        new
                        {
                            ListingID = 27,
                            AddressID = 15,
                            Bathrooms = 2,
                            Bedrooms = 1,
                            DateAvailable = new DateTime(2024, 3, 17, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7164),
                            MonthlyRate = 1683m,
                            Months = 6,
                            OwnerID = 1,
                            SquareFoot = 2189f,
                            Unit = "Unit 27"
                        },
                        new
                        {
                            ListingID = 28,
                            AddressID = 10,
                            Bathrooms = 3,
                            Bedrooms = 5,
                            DateAvailable = new DateTime(2024, 4, 3, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7166),
                            MonthlyRate = 2841m,
                            Months = 9,
                            OwnerID = 4,
                            SquareFoot = 950f,
                            Unit = "Unit 28"
                        },
                        new
                        {
                            ListingID = 29,
                            AddressID = 6,
                            Bathrooms = 1,
                            Bedrooms = 2,
                            DateAvailable = new DateTime(2024, 3, 23, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7169),
                            MonthlyRate = 1814m,
                            Months = 5,
                            OwnerID = 22,
                            SquareFoot = 2654f,
                            Unit = "Unit 29"
                        },
                        new
                        {
                            ListingID = 30,
                            AddressID = 17,
                            Bathrooms = 3,
                            Bedrooms = 3,
                            DateAvailable = new DateTime(2024, 3, 22, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7171),
                            MonthlyRate = 792m,
                            Months = 1,
                            OwnerID = 11,
                            SquareFoot = 916f,
                            Unit = "Unit 30"
                        },
                        new
                        {
                            ListingID = 31,
                            AddressID = 9,
                            Bathrooms = 2,
                            Bedrooms = 3,
                            DateAvailable = new DateTime(2024, 3, 20, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7173),
                            MonthlyRate = 1258m,
                            Months = 6,
                            OwnerID = 15,
                            SquareFoot = 1938f,
                            Unit = "Unit 31"
                        },
                        new
                        {
                            ListingID = 32,
                            AddressID = 12,
                            Bathrooms = 3,
                            Bedrooms = 3,
                            DateAvailable = new DateTime(2024, 4, 4, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7175),
                            MonthlyRate = 1765m,
                            Months = 1,
                            OwnerID = 3,
                            SquareFoot = 1216f,
                            Unit = "Unit 32"
                        },
                        new
                        {
                            ListingID = 33,
                            AddressID = 4,
                            Bathrooms = 2,
                            Bedrooms = 1,
                            DateAvailable = new DateTime(2024, 3, 29, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7177),
                            MonthlyRate = 2524m,
                            Months = 5,
                            OwnerID = 14,
                            SquareFoot = 2700f,
                            Unit = "Unit 33"
                        },
                        new
                        {
                            ListingID = 34,
                            AddressID = 6,
                            Bathrooms = 1,
                            Bedrooms = 4,
                            DateAvailable = new DateTime(2024, 4, 6, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7182),
                            MonthlyRate = 2665m,
                            Months = 6,
                            OwnerID = 11,
                            SquareFoot = 981f,
                            Unit = "Unit 34"
                        },
                        new
                        {
                            ListingID = 35,
                            AddressID = 5,
                            Bathrooms = 3,
                            Bedrooms = 2,
                            DateAvailable = new DateTime(2024, 3, 24, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7184),
                            MonthlyRate = 674m,
                            Months = 9,
                            OwnerID = 1,
                            SquareFoot = 869f,
                            Unit = "Unit 35"
                        },
                        new
                        {
                            ListingID = 36,
                            AddressID = 12,
                            Bathrooms = 1,
                            Bedrooms = 1,
                            DateAvailable = new DateTime(2024, 3, 25, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7186),
                            MonthlyRate = 1407m,
                            Months = 1,
                            OwnerID = 7,
                            SquareFoot = 1948f,
                            Unit = "Unit 36"
                        },
                        new
                        {
                            ListingID = 37,
                            AddressID = 12,
                            Bathrooms = 2,
                            Bedrooms = 2,
                            DateAvailable = new DateTime(2024, 3, 28, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7188),
                            MonthlyRate = 2578m,
                            Months = 11,
                            OwnerID = 4,
                            SquareFoot = 1980f,
                            Unit = "Unit 37"
                        },
                        new
                        {
                            ListingID = 38,
                            AddressID = 6,
                            Bathrooms = 3,
                            Bedrooms = 5,
                            DateAvailable = new DateTime(2024, 3, 23, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7190),
                            MonthlyRate = 958m,
                            Months = 4,
                            OwnerID = 10,
                            SquareFoot = 851f,
                            Unit = "Unit 38"
                        },
                        new
                        {
                            ListingID = 39,
                            AddressID = 12,
                            Bathrooms = 1,
                            Bedrooms = 2,
                            DateAvailable = new DateTime(2024, 3, 19, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7193),
                            MonthlyRate = 2775m,
                            Months = 9,
                            OwnerID = 11,
                            SquareFoot = 1424f,
                            Unit = "Unit 39"
                        },
                        new
                        {
                            ListingID = 40,
                            AddressID = 19,
                            Bathrooms = 3,
                            Bedrooms = 1,
                            DateAvailable = new DateTime(2024, 3, 29, 7, 18, 14, 870, DateTimeKind.Local).AddTicks(7195),
                            MonthlyRate = 549m,
                            Months = 5,
                            OwnerID = 7,
                            SquareFoot = 1151f,
                            Unit = "Unit 40"
                        });
                });

            modelBuilder.Entity("ApartmentFinder.Models.ListingAmenity", b =>
                {
                    b.Property<int>("ListingID")
                        .HasColumnType("int");

                    b.Property<int>("AmenityID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ListingID", "AmenityID");

                    b.ToTable("ListingAmenities");

                    b.HasData(
                        new
                        {
                            ListingID = 21,
                            AmenityID = 19,
                            Notes = "Iteration 1 of seed data"
                        },
                        new
                        {
                            ListingID = 22,
                            AmenityID = 18,
                            Notes = "Iteration 2 of seed data"
                        },
                        new
                        {
                            ListingID = 23,
                            AmenityID = 17,
                            Notes = "Iteration 3 of seed data"
                        },
                        new
                        {
                            ListingID = 24,
                            AmenityID = 16,
                            Notes = "Iteration 4 of seed data"
                        },
                        new
                        {
                            ListingID = 25,
                            AmenityID = 15,
                            Notes = "Iteration 5 of seed data"
                        },
                        new
                        {
                            ListingID = 26,
                            AmenityID = 14,
                            Notes = "Iteration 6 of seed data"
                        },
                        new
                        {
                            ListingID = 27,
                            AmenityID = 13,
                            Notes = "Iteration 7 of seed data"
                        },
                        new
                        {
                            ListingID = 28,
                            AmenityID = 12,
                            Notes = "Iteration 8 of seed data"
                        },
                        new
                        {
                            ListingID = 29,
                            AmenityID = 11,
                            Notes = "Iteration 9 of seed data"
                        },
                        new
                        {
                            ListingID = 30,
                            AmenityID = 10,
                            Notes = "Iteration 10 of seed data"
                        },
                        new
                        {
                            ListingID = 31,
                            AmenityID = 9,
                            Notes = "Iteration 11 of seed data"
                        },
                        new
                        {
                            ListingID = 32,
                            AmenityID = 8,
                            Notes = "Iteration 12 of seed data"
                        },
                        new
                        {
                            ListingID = 33,
                            AmenityID = 7,
                            Notes = "Iteration 13 of seed data"
                        },
                        new
                        {
                            ListingID = 34,
                            AmenityID = 6,
                            Notes = "Iteration 14 of seed data"
                        },
                        new
                        {
                            ListingID = 35,
                            AmenityID = 5,
                            Notes = "Iteration 15 of seed data"
                        });
                });

            modelBuilder.Entity("ApartmentFinder.Models.ListingUtility", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceID"));

                    b.Property<int>("ListingID")
                        .HasColumnType("int");

                    b.Property<decimal>("UtilitiesEstimate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UtilityID")
                        .HasColumnType("int");

                    b.HasKey("ServiceID");

                    b.ToTable("ListingUtilities");

                    b.HasData(
                        new
                        {
                            ServiceID = 1,
                            ListingID = 4,
                            UtilitiesEstimate = 487.991864699266000m,
                            UtilityID = 4
                        },
                        new
                        {
                            ServiceID = 2,
                            ListingID = 24,
                            UtilitiesEstimate = 137.302347516441500m,
                            UtilityID = 9
                        },
                        new
                        {
                            ServiceID = 3,
                            ListingID = 1,
                            UtilitiesEstimate = 95.483086102680500m,
                            UtilityID = 9
                        },
                        new
                        {
                            ServiceID = 4,
                            ListingID = 16,
                            UtilitiesEstimate = 327.865943139483000m,
                            UtilityID = 9
                        },
                        new
                        {
                            ServiceID = 5,
                            ListingID = 5,
                            UtilitiesEstimate = 28.8083806768298500m,
                            UtilityID = 1
                        },
                        new
                        {
                            ServiceID = 6,
                            ListingID = 31,
                            UtilitiesEstimate = 139.740532723405500m,
                            UtilityID = 7
                        },
                        new
                        {
                            ServiceID = 7,
                            ListingID = 10,
                            UtilitiesEstimate = 145.598472522938000m,
                            UtilityID = 2
                        },
                        new
                        {
                            ServiceID = 8,
                            ListingID = 1,
                            UtilitiesEstimate = 262.158318314923000m,
                            UtilityID = 5
                        },
                        new
                        {
                            ServiceID = 9,
                            ListingID = 36,
                            UtilitiesEstimate = 179.904993796139000m,
                            UtilityID = 1
                        },
                        new
                        {
                            ServiceID = 10,
                            ListingID = 30,
                            UtilitiesEstimate = 414.597545116867500m,
                            UtilityID = 6
                        },
                        new
                        {
                            ServiceID = 11,
                            ListingID = 1,
                            UtilitiesEstimate = 129.489192908635500m,
                            UtilityID = 4
                        },
                        new
                        {
                            ServiceID = 12,
                            ListingID = 20,
                            UtilitiesEstimate = 488.236561426852000m,
                            UtilityID = 3
                        },
                        new
                        {
                            ServiceID = 13,
                            ListingID = 34,
                            UtilitiesEstimate = 494.250506117614500m,
                            UtilityID = 2
                        },
                        new
                        {
                            ServiceID = 14,
                            ListingID = 17,
                            UtilitiesEstimate = 496.866414755059500m,
                            UtilityID = 2
                        },
                        new
                        {
                            ServiceID = 15,
                            ListingID = 14,
                            UtilitiesEstimate = 384.953832497559500m,
                            UtilityID = 4
                        });
                });

            modelBuilder.Entity("ApartmentFinder.Models.Utility", b =>
                {
                    b.Property<int>("UtilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtilityID"));

                    b.Property<decimal>("EstMonRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UtilityType")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("UtilityID");

                    b.ToTable("Utilities");

                    b.HasData(
                        new
                        {
                            UtilityID = 1,
                            EstMonRate = 50.00m,
                            Name = "Gas Company A",
                            UtilityType = 0,
                            Website = "http://www.gascompanya.com/"
                        },
                        new
                        {
                            UtilityID = 2,
                            EstMonRate = 70.00m,
                            Name = "Electric Company B",
                            UtilityType = 1,
                            Website = "http://www.electriccompanyb.com/"
                        },
                        new
                        {
                            UtilityID = 3,
                            EstMonRate = 80.00m,
                            Name = "Cable Company C",
                            UtilityType = 2,
                            Website = "http://www.cablecompanyc.com/"
                        },
                        new
                        {
                            UtilityID = 4,
                            EstMonRate = 40.00m,
                            Name = "Water Company D",
                            UtilityType = 3,
                            Website = "http://www.watercompanyd.com/"
                        },
                        new
                        {
                            UtilityID = 5,
                            EstMonRate = 30.00m,
                            Name = "Garbage Company E",
                            UtilityType = 4,
                            Website = "http://www.garbagecompanye.com/"
                        },
                        new
                        {
                            UtilityID = 6,
                            EstMonRate = 60.00m,
                            Name = "Telecom Company F",
                            UtilityType = 5,
                            Website = "http://www.telecomcompanyf.com/"
                        },
                        new
                        {
                            UtilityID = 7,
                            EstMonRate = 55.00m,
                            Name = "Gas Company G",
                            UtilityType = 0,
                            Website = "http://www.gascompanyg.com/"
                        },
                        new
                        {
                            UtilityID = 8,
                            EstMonRate = 75.00m,
                            Name = "Electric Company H",
                            UtilityType = 1,
                            Website = "http://www.electriccompanyh.com/"
                        },
                        new
                        {
                            UtilityID = 9,
                            EstMonRate = 85.00m,
                            Name = "Cable Company I",
                            UtilityType = 2,
                            Website = "http://www.cablecompanyi.com/"
                        },
                        new
                        {
                            UtilityID = 10,
                            EstMonRate = 45.00m,
                            Name = "Water Company J",
                            UtilityType = 3,
                            Website = "http://www.watercompanyj.com/"
                        });
                });

            modelBuilder.Entity("ApartmentFinder.Models.Zipcode", b =>
                {
                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ZipCode");

                    b.ToTable("ZipCodes");

                    b.HasData(
                        new
                        {
                            ZipCode = "32501",
                            City = "Pensacola",
                            State = "FL"
                        },
                        new
                        {
                            ZipCode = "32505",
                            City = "Pensacola",
                            State = "FL"
                        },
                        new
                        {
                            ZipCode = "32509",
                            City = "Pensacola",
                            State = "FL"
                        },
                        new
                        {
                            ZipCode = "32514",
                            City = "Pensacola",
                            State = "FL"
                        },
                        new
                        {
                            ZipCode = "32526",
                            City = "Pensacola",
                            State = "FL"
                        },
                        new
                        {
                            ZipCode = "32561",
                            City = "Gulf Breeze",
                            State = "FL"
                        },
                        new
                        {
                            ZipCode = "32566",
                            City = "Navarre",
                            State = "FL"
                        },
                        new
                        {
                            ZipCode = "32571",
                            City = "Milton",
                            State = "FL"
                        },
                        new
                        {
                            ZipCode = "32591",
                            City = "Milton",
                            State = "FL"
                        },
                        new
                        {
                            ZipCode = "33954",
                            City = "Port Charlotte",
                            State = "FL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApartmentFinder.Models.InternalUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("InternalUserID")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("InternalUser");

                    b.HasData(
                        new
                        {
                            Id = "520a8b55-34fd-4f63-a606-850660fb47af",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92694286-9d00-460e-9f56-1d38eabb10b0",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "23a259ac-41f0-4ed9-a3e7-3a46575452cc",
                            TwoFactorEnabled = false,
                            FirstName = "RyanAdmin",
                            InternalUserID = 1,
                            LastName = "Southwell"
                        },
                        new
                        {
                            Id = "0eb31035-05e8-4036-b1b2-167c74822f97",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1756d14-3b94-44b7-9c3c-190f0b04d963",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f7c373b-bc05-4fd0-a627-aa661b4b5238",
                            TwoFactorEnabled = false,
                            FirstName = "RyanUser",
                            InternalUserID = 2,
                            LastName = "Southwell"
                        },
                        new
                        {
                            Id = "3dde58e5-4eb3-40a7-8f0a-4cfc3b6e125d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a8b35c4-fc97-4b2a-bde7-08a5fd1976ee",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f26b4d5f-011d-4762-8512-f79e61e4bfa2",
                            TwoFactorEnabled = false,
                            FirstName = "Michael",
                            InternalUserID = 3,
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = "914cc941-f476-42bb-96a9-aaf02c493310",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7cf730b-deb1-4865-a328-a0bd0effd4bf",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "646127b9-bced-4d35-872e-8ae5fc59b724",
                            TwoFactorEnabled = false,
                            FirstName = "Emily",
                            InternalUserID = 4,
                            LastName = "Williams"
                        },
                        new
                        {
                            Id = "0c510bf1-bbf4-4338-8ebb-55a8f5cf8637",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "031fefeb-3776-4b67-b1ea-493d2dfb8c01",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea77b40d-3dd1-481d-9059-60ad8e001d68",
                            TwoFactorEnabled = false,
                            FirstName = "David",
                            InternalUserID = 5,
                            LastName = "Brown"
                        },
                        new
                        {
                            Id = "3f4c2158-dc87-415d-a75b-6a9693aa67cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ce8fd14-c646-4378-b07a-55b797159b91",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d388f88d-72ff-4961-a0b6-b6105a779a81",
                            TwoFactorEnabled = false,
                            FirstName = "Sarah",
                            InternalUserID = 6,
                            LastName = "Jones"
                        },
                        new
                        {
                            Id = "62542426-ce5f-4d44-9e19-e5a2d8761a5e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02d72491-6600-4e54-b7b4-3c04ec2a9573",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5ef986e-a2f7-4943-b7b6-a8c8e537b792",
                            TwoFactorEnabled = false,
                            FirstName = "Daniel",
                            InternalUserID = 7,
                            LastName = "Garcia"
                        },
                        new
                        {
                            Id = "bfb8e405-0b54-4175-b110-620cd970e236",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7bf6ddfd-557b-4161-8dc5-c7d6dcc17b77",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a07e232-b711-46ff-9b0f-aae8d87e0323",
                            TwoFactorEnabled = false,
                            FirstName = "Jennifer",
                            InternalUserID = 8,
                            LastName = "Martinez"
                        },
                        new
                        {
                            Id = "d8f2e245-82ad-4bda-ae56-307ad38b8e32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59bfdfec-fb53-4ac7-9190-a92bfe7a77f5",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d40d6d7f-a501-4775-a7cf-8c8b072bc5dc",
                            TwoFactorEnabled = false,
                            FirstName = "Christopher",
                            InternalUserID = 9,
                            LastName = "Hernandez"
                        },
                        new
                        {
                            Id = "fe2b0270-167e-4eab-8db0-f15772a69a69",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2c3c7c8-0824-4370-92cf-096aae4b5266",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1fed37e-6afb-47c6-ae41-f90363019e92",
                            TwoFactorEnabled = false,
                            FirstName = "Lisa",
                            InternalUserID = 10,
                            LastName = "Lopez"
                        },
                        new
                        {
                            Id = "ebef3681-9c81-48b9-bee3-d79166b52081",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d01cb59a-1754-4f66-aa21-6339654e39f2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b7944ae-ed1e-40c8-b010-c23554756b08",
                            TwoFactorEnabled = false,
                            FirstName = "Matthew",
                            InternalUserID = 11,
                            LastName = "Gonzalez"
                        },
                        new
                        {
                            Id = "1983219a-ca6c-4f4b-b798-9020bddb91c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e08bf46f-c609-4deb-a91d-f21d9972b12d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3e1e598-4e6a-4d0e-833b-0aa6e7fb2673",
                            TwoFactorEnabled = false,
                            FirstName = "Jessica",
                            InternalUserID = 12,
                            LastName = "Wilson"
                        },
                        new
                        {
                            Id = "18af29aa-8277-467d-94fb-0005bb79daf2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a2c2a15-4dbb-49aa-954d-f82c1ac2940c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9031e55a-7682-4cf9-b95d-d9e7e3fd4d35",
                            TwoFactorEnabled = false,
                            FirstName = "James",
                            InternalUserID = 13,
                            LastName = "Anderson"
                        },
                        new
                        {
                            Id = "d6ab3f8e-a91b-4445-8cef-5bbbb923091d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce56e3df-726a-4c29-b5a4-28440b7e42a2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2e03762-598b-4ad3-a39b-541dac676200",
                            TwoFactorEnabled = false,
                            FirstName = "Ashley",
                            InternalUserID = 14,
                            LastName = "Thomas"
                        },
                        new
                        {
                            Id = "91697bcd-2f1d-4857-be33-e67eab1100d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b087ecfc-e555-41ae-9616-36d81a1ecc83",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc338d23-486f-4e1e-9727-b1070ff5b832",
                            TwoFactorEnabled = false,
                            FirstName = "Robert",
                            InternalUserID = 15,
                            LastName = "Taylor"
                        },
                        new
                        {
                            Id = "9d263bee-84ad-421f-bf34-5faee7cccded",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d566f666-d238-4c07-ac5a-aa67356dcb84",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7032212-ebd5-46c8-89d5-ac729498a7e5",
                            TwoFactorEnabled = false,
                            FirstName = "Amanda",
                            InternalUserID = 16,
                            LastName = "Moore"
                        },
                        new
                        {
                            Id = "34acfa6b-df7c-4744-ac18-a2bea07fc896",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffa426c7-7645-4b40-9a07-bbcdba5c3fb1",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44030986-6480-41c5-8a56-3a0f8d1997d9",
                            TwoFactorEnabled = false,
                            FirstName = "Ryan",
                            InternalUserID = 17,
                            LastName = "Jackson"
                        },
                        new
                        {
                            Id = "b5a12cf8-fc1b-4419-b7aa-fd2cc6d9cd19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34757ae9-6f16-42dd-8237-1dcc86a34af6",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72dd4886-c388-4b70-84da-f016fb552db5",
                            TwoFactorEnabled = false,
                            FirstName = "Michelle",
                            InternalUserID = 18,
                            LastName = "White"
                        },
                        new
                        {
                            Id = "d1fb8bb6-72ab-4535-b77e-9e34091cdb0b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b495e373-2f13-4b22-8388-9eeb1aa68020",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d02bd6f3-2ab9-4ec7-8e13-9318d7bdbd8f",
                            TwoFactorEnabled = false,
                            FirstName = "William",
                            InternalUserID = 19,
                            LastName = "Harris"
                        },
                        new
                        {
                            Id = "47b99e84-4a80-40c6-8eb3-412f177ab86b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97a805ea-c22e-4083-9572-1d454e4ae7e4",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9acfab4e-b8d2-456a-a7d5-7f9ee34e7784",
                            TwoFactorEnabled = false,
                            FirstName = "Stephanie",
                            InternalUserID = 20,
                            LastName = "Martin"
                        },
                        new
                        {
                            Id = "7ec89834-14be-4be9-bfa2-0927e14e882e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c792cc4d-f236-40bf-9c66-93b3a86168e2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d0e9165-dae9-43da-bfd2-66d7f7e78dde",
                            TwoFactorEnabled = false,
                            FirstName = "John",
                            InternalUserID = 21,
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = "ff6027dd-ac2d-4377-8f79-3d518ec1581a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26313ddb-d564-4187-b2aa-00c7c05f8442",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8d92c98-44c7-490a-9b94-47159bd1a6a2",
                            TwoFactorEnabled = false,
                            FirstName = "Jane",
                            InternalUserID = 22,
                            LastName = "Smith"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
